// source: twitchroulette/v1/twitchroulette.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.twitchroulette.v1.GetRandomStreamRequest', null, global);
goog.exportSymbol('proto.twitchroulette.v1.GetRandomStreamResponse', null, global);
goog.exportSymbol('proto.twitchroulette.v1.GetStreamGamesRequest', null, global);
goog.exportSymbol('proto.twitchroulette.v1.GetStreamGamesResponse', null, global);
goog.exportSymbol('proto.twitchroulette.v1.GetStreamTagsRequest', null, global);
goog.exportSymbol('proto.twitchroulette.v1.GetStreamTagsResponse', null, global);
goog.exportSymbol('proto.twitchroulette.v1.Stream', null, global);
goog.exportSymbol('proto.twitchroulette.v1.StreamGame', null, global);
goog.exportSymbol('proto.twitchroulette.v1.StreamTag', null, global);
goog.exportSymbol('proto.twitchroulette.v1.StreamUser', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.twitchroulette.v1.StreamTag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.twitchroulette.v1.StreamTag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.twitchroulette.v1.StreamTag.displayName = 'proto.twitchroulette.v1.StreamTag';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.twitchroulette.v1.StreamGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.twitchroulette.v1.StreamGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.twitchroulette.v1.StreamGame.displayName = 'proto.twitchroulette.v1.StreamGame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.twitchroulette.v1.StreamUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.twitchroulette.v1.StreamUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.twitchroulette.v1.StreamUser.displayName = 'proto.twitchroulette.v1.StreamUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.twitchroulette.v1.Stream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.twitchroulette.v1.Stream.repeatedFields_, null);
};
goog.inherits(proto.twitchroulette.v1.Stream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.twitchroulette.v1.Stream.displayName = 'proto.twitchroulette.v1.Stream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.twitchroulette.v1.GetRandomStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.twitchroulette.v1.GetRandomStreamRequest.repeatedFields_, null);
};
goog.inherits(proto.twitchroulette.v1.GetRandomStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.twitchroulette.v1.GetRandomStreamRequest.displayName = 'proto.twitchroulette.v1.GetRandomStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.twitchroulette.v1.GetRandomStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.twitchroulette.v1.GetRandomStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.twitchroulette.v1.GetRandomStreamResponse.displayName = 'proto.twitchroulette.v1.GetRandomStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.twitchroulette.v1.GetStreamTagsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.twitchroulette.v1.GetStreamTagsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.twitchroulette.v1.GetStreamTagsRequest.displayName = 'proto.twitchroulette.v1.GetStreamTagsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.twitchroulette.v1.GetStreamTagsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.twitchroulette.v1.GetStreamTagsResponse.repeatedFields_, null);
};
goog.inherits(proto.twitchroulette.v1.GetStreamTagsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.twitchroulette.v1.GetStreamTagsResponse.displayName = 'proto.twitchroulette.v1.GetStreamTagsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.twitchroulette.v1.GetStreamGamesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.twitchroulette.v1.GetStreamGamesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.twitchroulette.v1.GetStreamGamesRequest.displayName = 'proto.twitchroulette.v1.GetStreamGamesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.twitchroulette.v1.GetStreamGamesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.twitchroulette.v1.GetStreamGamesResponse.repeatedFields_, null);
};
goog.inherits(proto.twitchroulette.v1.GetStreamGamesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.twitchroulette.v1.GetStreamGamesResponse.displayName = 'proto.twitchroulette.v1.GetStreamGamesResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.twitchroulette.v1.StreamTag.prototype.toObject = function(opt_includeInstance) {
  return proto.twitchroulette.v1.StreamTag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.twitchroulette.v1.StreamTag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.StreamTag.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.twitchroulette.v1.StreamTag}
 */
proto.twitchroulette.v1.StreamTag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.twitchroulette.v1.StreamTag;
  return proto.twitchroulette.v1.StreamTag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.twitchroulette.v1.StreamTag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.twitchroulette.v1.StreamTag}
 */
proto.twitchroulette.v1.StreamTag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.twitchroulette.v1.StreamTag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.twitchroulette.v1.StreamTag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.twitchroulette.v1.StreamTag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.StreamTag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.twitchroulette.v1.StreamTag.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.twitchroulette.v1.StreamTag} returns this
 */
proto.twitchroulette.v1.StreamTag.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.twitchroulette.v1.StreamTag.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.twitchroulette.v1.StreamTag} returns this
 */
proto.twitchroulette.v1.StreamTag.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.twitchroulette.v1.StreamGame.prototype.toObject = function(opt_includeInstance) {
  return proto.twitchroulette.v1.StreamGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.twitchroulette.v1.StreamGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.StreamGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    imageUrl: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.twitchroulette.v1.StreamGame}
 */
proto.twitchroulette.v1.StreamGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.twitchroulette.v1.StreamGame;
  return proto.twitchroulette.v1.StreamGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.twitchroulette.v1.StreamGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.twitchroulette.v1.StreamGame}
 */
proto.twitchroulette.v1.StreamGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.twitchroulette.v1.StreamGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.twitchroulette.v1.StreamGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.twitchroulette.v1.StreamGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.StreamGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getImageUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.twitchroulette.v1.StreamGame.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.twitchroulette.v1.StreamGame} returns this
 */
proto.twitchroulette.v1.StreamGame.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.twitchroulette.v1.StreamGame.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.twitchroulette.v1.StreamGame} returns this
 */
proto.twitchroulette.v1.StreamGame.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string image_url = 3;
 * @return {string}
 */
proto.twitchroulette.v1.StreamGame.prototype.getImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.twitchroulette.v1.StreamGame} returns this
 */
proto.twitchroulette.v1.StreamGame.prototype.setImageUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.twitchroulette.v1.StreamUser.prototype.toObject = function(opt_includeInstance) {
  return proto.twitchroulette.v1.StreamUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.twitchroulette.v1.StreamUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.StreamUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    displayName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    loginName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    imageUrl: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.twitchroulette.v1.StreamUser}
 */
proto.twitchroulette.v1.StreamUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.twitchroulette.v1.StreamUser;
  return proto.twitchroulette.v1.StreamUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.twitchroulette.v1.StreamUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.twitchroulette.v1.StreamUser}
 */
proto.twitchroulette.v1.StreamUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoginName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.twitchroulette.v1.StreamUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.twitchroulette.v1.StreamUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.twitchroulette.v1.StreamUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.StreamUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLoginName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getImageUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.twitchroulette.v1.StreamUser.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.twitchroulette.v1.StreamUser} returns this
 */
proto.twitchroulette.v1.StreamUser.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string display_name = 2;
 * @return {string}
 */
proto.twitchroulette.v1.StreamUser.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.twitchroulette.v1.StreamUser} returns this
 */
proto.twitchroulette.v1.StreamUser.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string login_name = 3;
 * @return {string}
 */
proto.twitchroulette.v1.StreamUser.prototype.getLoginName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.twitchroulette.v1.StreamUser} returns this
 */
proto.twitchroulette.v1.StreamUser.prototype.setLoginName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string image_url = 4;
 * @return {string}
 */
proto.twitchroulette.v1.StreamUser.prototype.getImageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.twitchroulette.v1.StreamUser} returns this
 */
proto.twitchroulette.v1.StreamUser.prototype.setImageUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.twitchroulette.v1.Stream.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.twitchroulette.v1.Stream.prototype.toObject = function(opt_includeInstance) {
  return proto.twitchroulette.v1.Stream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.twitchroulette.v1.Stream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.Stream.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    user: (f = msg.getUser()) && proto.twitchroulette.v1.StreamUser.toObject(includeInstance, f),
    game: (f = msg.getGame()) && proto.twitchroulette.v1.StreamGame.toObject(includeInstance, f),
    title: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    proto.twitchroulette.v1.StreamTag.toObject, includeInstance),
    online: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.twitchroulette.v1.Stream}
 */
proto.twitchroulette.v1.Stream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.twitchroulette.v1.Stream;
  return proto.twitchroulette.v1.Stream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.twitchroulette.v1.Stream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.twitchroulette.v1.Stream}
 */
proto.twitchroulette.v1.Stream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.twitchroulette.v1.StreamUser;
      reader.readMessage(value,proto.twitchroulette.v1.StreamUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = new proto.twitchroulette.v1.StreamGame;
      reader.readMessage(value,proto.twitchroulette.v1.StreamGame.deserializeBinaryFromReader);
      msg.setGame(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 5:
      var value = new proto.twitchroulette.v1.StreamTag;
      reader.readMessage(value,proto.twitchroulette.v1.StreamTag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.twitchroulette.v1.Stream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.twitchroulette.v1.Stream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.twitchroulette.v1.Stream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.Stream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.twitchroulette.v1.StreamUser.serializeBinaryToWriter
    );
  }
  f = message.getGame();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.twitchroulette.v1.StreamGame.serializeBinaryToWriter
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.twitchroulette.v1.StreamTag.serializeBinaryToWriter
    );
  }
  f = message.getOnline();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.twitchroulette.v1.Stream.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.twitchroulette.v1.Stream} returns this
 */
proto.twitchroulette.v1.Stream.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional StreamUser user = 2;
 * @return {?proto.twitchroulette.v1.StreamUser}
 */
proto.twitchroulette.v1.Stream.prototype.getUser = function() {
  return /** @type{?proto.twitchroulette.v1.StreamUser} */ (
    jspb.Message.getWrapperField(this, proto.twitchroulette.v1.StreamUser, 2));
};


/**
 * @param {?proto.twitchroulette.v1.StreamUser|undefined} value
 * @return {!proto.twitchroulette.v1.Stream} returns this
*/
proto.twitchroulette.v1.Stream.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.twitchroulette.v1.Stream} returns this
 */
proto.twitchroulette.v1.Stream.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.twitchroulette.v1.Stream.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StreamGame game = 3;
 * @return {?proto.twitchroulette.v1.StreamGame}
 */
proto.twitchroulette.v1.Stream.prototype.getGame = function() {
  return /** @type{?proto.twitchroulette.v1.StreamGame} */ (
    jspb.Message.getWrapperField(this, proto.twitchroulette.v1.StreamGame, 3));
};


/**
 * @param {?proto.twitchroulette.v1.StreamGame|undefined} value
 * @return {!proto.twitchroulette.v1.Stream} returns this
*/
proto.twitchroulette.v1.Stream.prototype.setGame = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.twitchroulette.v1.Stream} returns this
 */
proto.twitchroulette.v1.Stream.prototype.clearGame = function() {
  return this.setGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.twitchroulette.v1.Stream.prototype.hasGame = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string title = 4;
 * @return {string}
 */
proto.twitchroulette.v1.Stream.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.twitchroulette.v1.Stream} returns this
 */
proto.twitchroulette.v1.Stream.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated StreamTag tags = 5;
 * @return {!Array<!proto.twitchroulette.v1.StreamTag>}
 */
proto.twitchroulette.v1.Stream.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.twitchroulette.v1.StreamTag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.twitchroulette.v1.StreamTag, 5));
};


/**
 * @param {!Array<!proto.twitchroulette.v1.StreamTag>} value
 * @return {!proto.twitchroulette.v1.Stream} returns this
*/
proto.twitchroulette.v1.Stream.prototype.setTagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.twitchroulette.v1.StreamTag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.twitchroulette.v1.StreamTag}
 */
proto.twitchroulette.v1.Stream.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.twitchroulette.v1.StreamTag, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.twitchroulette.v1.Stream} returns this
 */
proto.twitchroulette.v1.Stream.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * optional bool online = 6;
 * @return {boolean}
 */
proto.twitchroulette.v1.Stream.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.twitchroulette.v1.Stream} returns this
 */
proto.twitchroulette.v1.Stream.prototype.setOnline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.twitchroulette.v1.GetRandomStreamRequest.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.twitchroulette.v1.GetRandomStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.twitchroulette.v1.GetRandomStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.GetRandomStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    includedTagIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    excludedTagIdsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    includedGameIdsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    excludedGameIdsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.twitchroulette.v1.GetRandomStreamRequest}
 */
proto.twitchroulette.v1.GetRandomStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.twitchroulette.v1.GetRandomStreamRequest;
  return proto.twitchroulette.v1.GetRandomStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.twitchroulette.v1.GetRandomStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.twitchroulette.v1.GetRandomStreamRequest}
 */
proto.twitchroulette.v1.GetRandomStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addIncludedTagIds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addExcludedTagIds(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addIncludedGameIds(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addExcludedGameIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.twitchroulette.v1.GetRandomStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.twitchroulette.v1.GetRandomStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.GetRandomStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIncludedTagIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getExcludedTagIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getIncludedGameIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getExcludedGameIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * repeated string included_tag_ids = 1;
 * @return {!Array<string>}
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.getIncludedTagIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.twitchroulette.v1.GetRandomStreamRequest} returns this
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.setIncludedTagIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.twitchroulette.v1.GetRandomStreamRequest} returns this
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.addIncludedTagIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.twitchroulette.v1.GetRandomStreamRequest} returns this
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.clearIncludedTagIdsList = function() {
  return this.setIncludedTagIdsList([]);
};


/**
 * repeated string excluded_tag_ids = 2;
 * @return {!Array<string>}
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.getExcludedTagIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.twitchroulette.v1.GetRandomStreamRequest} returns this
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.setExcludedTagIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.twitchroulette.v1.GetRandomStreamRequest} returns this
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.addExcludedTagIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.twitchroulette.v1.GetRandomStreamRequest} returns this
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.clearExcludedTagIdsList = function() {
  return this.setExcludedTagIdsList([]);
};


/**
 * repeated string included_game_ids = 3;
 * @return {!Array<string>}
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.getIncludedGameIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.twitchroulette.v1.GetRandomStreamRequest} returns this
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.setIncludedGameIdsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.twitchroulette.v1.GetRandomStreamRequest} returns this
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.addIncludedGameIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.twitchroulette.v1.GetRandomStreamRequest} returns this
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.clearIncludedGameIdsList = function() {
  return this.setIncludedGameIdsList([]);
};


/**
 * repeated string excluded_game_ids = 4;
 * @return {!Array<string>}
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.getExcludedGameIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.twitchroulette.v1.GetRandomStreamRequest} returns this
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.setExcludedGameIdsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.twitchroulette.v1.GetRandomStreamRequest} returns this
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.addExcludedGameIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.twitchroulette.v1.GetRandomStreamRequest} returns this
 */
proto.twitchroulette.v1.GetRandomStreamRequest.prototype.clearExcludedGameIdsList = function() {
  return this.setExcludedGameIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.twitchroulette.v1.GetRandomStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.twitchroulette.v1.GetRandomStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.twitchroulette.v1.GetRandomStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.GetRandomStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: (f = msg.getStream()) && proto.twitchroulette.v1.Stream.toObject(includeInstance, f),
    filterId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.twitchroulette.v1.GetRandomStreamResponse}
 */
proto.twitchroulette.v1.GetRandomStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.twitchroulette.v1.GetRandomStreamResponse;
  return proto.twitchroulette.v1.GetRandomStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.twitchroulette.v1.GetRandomStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.twitchroulette.v1.GetRandomStreamResponse}
 */
proto.twitchroulette.v1.GetRandomStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.twitchroulette.v1.Stream;
      reader.readMessage(value,proto.twitchroulette.v1.Stream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilterId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.twitchroulette.v1.GetRandomStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.twitchroulette.v1.GetRandomStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.twitchroulette.v1.GetRandomStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.GetRandomStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.twitchroulette.v1.Stream.serializeBinaryToWriter
    );
  }
  f = message.getFilterId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Stream stream = 1;
 * @return {?proto.twitchroulette.v1.Stream}
 */
proto.twitchroulette.v1.GetRandomStreamResponse.prototype.getStream = function() {
  return /** @type{?proto.twitchroulette.v1.Stream} */ (
    jspb.Message.getWrapperField(this, proto.twitchroulette.v1.Stream, 1));
};


/**
 * @param {?proto.twitchroulette.v1.Stream|undefined} value
 * @return {!proto.twitchroulette.v1.GetRandomStreamResponse} returns this
*/
proto.twitchroulette.v1.GetRandomStreamResponse.prototype.setStream = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.twitchroulette.v1.GetRandomStreamResponse} returns this
 */
proto.twitchroulette.v1.GetRandomStreamResponse.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.twitchroulette.v1.GetRandomStreamResponse.prototype.hasStream = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string filter_id = 2;
 * @return {string}
 */
proto.twitchroulette.v1.GetRandomStreamResponse.prototype.getFilterId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.twitchroulette.v1.GetRandomStreamResponse} returns this
 */
proto.twitchroulette.v1.GetRandomStreamResponse.prototype.setFilterId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.twitchroulette.v1.GetStreamTagsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.twitchroulette.v1.GetStreamTagsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.twitchroulette.v1.GetStreamTagsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.GetStreamTagsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    parent: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.twitchroulette.v1.GetStreamTagsRequest}
 */
proto.twitchroulette.v1.GetStreamTagsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.twitchroulette.v1.GetStreamTagsRequest;
  return proto.twitchroulette.v1.GetStreamTagsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.twitchroulette.v1.GetStreamTagsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.twitchroulette.v1.GetStreamTagsRequest}
 */
proto.twitchroulette.v1.GetStreamTagsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.twitchroulette.v1.GetStreamTagsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.twitchroulette.v1.GetStreamTagsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.twitchroulette.v1.GetStreamTagsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.GetStreamTagsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string parent = 1;
 * @return {string}
 */
proto.twitchroulette.v1.GetStreamTagsRequest.prototype.getParent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.twitchroulette.v1.GetStreamTagsRequest} returns this
 */
proto.twitchroulette.v1.GetStreamTagsRequest.prototype.setParent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string page_token = 2;
 * @return {string}
 */
proto.twitchroulette.v1.GetStreamTagsRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.twitchroulette.v1.GetStreamTagsRequest} returns this
 */
proto.twitchroulette.v1.GetStreamTagsRequest.prototype.setPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.twitchroulette.v1.GetStreamTagsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.twitchroulette.v1.GetStreamTagsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.twitchroulette.v1.GetStreamTagsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.twitchroulette.v1.GetStreamTagsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.GetStreamTagsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    proto.twitchroulette.v1.StreamTag.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.twitchroulette.v1.GetStreamTagsResponse}
 */
proto.twitchroulette.v1.GetStreamTagsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.twitchroulette.v1.GetStreamTagsResponse;
  return proto.twitchroulette.v1.GetStreamTagsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.twitchroulette.v1.GetStreamTagsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.twitchroulette.v1.GetStreamTagsResponse}
 */
proto.twitchroulette.v1.GetStreamTagsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.twitchroulette.v1.StreamTag;
      reader.readMessage(value,proto.twitchroulette.v1.StreamTag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.twitchroulette.v1.GetStreamTagsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.twitchroulette.v1.GetStreamTagsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.twitchroulette.v1.GetStreamTagsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.GetStreamTagsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.twitchroulette.v1.StreamTag.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StreamTag tags = 1;
 * @return {!Array<!proto.twitchroulette.v1.StreamTag>}
 */
proto.twitchroulette.v1.GetStreamTagsResponse.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.twitchroulette.v1.StreamTag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.twitchroulette.v1.StreamTag, 1));
};


/**
 * @param {!Array<!proto.twitchroulette.v1.StreamTag>} value
 * @return {!proto.twitchroulette.v1.GetStreamTagsResponse} returns this
*/
proto.twitchroulette.v1.GetStreamTagsResponse.prototype.setTagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.twitchroulette.v1.StreamTag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.twitchroulette.v1.StreamTag}
 */
proto.twitchroulette.v1.GetStreamTagsResponse.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.twitchroulette.v1.StreamTag, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.twitchroulette.v1.GetStreamTagsResponse} returns this
 */
proto.twitchroulette.v1.GetStreamTagsResponse.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.twitchroulette.v1.GetStreamGamesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.twitchroulette.v1.GetStreamGamesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.twitchroulette.v1.GetStreamGamesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.GetStreamGamesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    parent: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pageToken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.twitchroulette.v1.GetStreamGamesRequest}
 */
proto.twitchroulette.v1.GetStreamGamesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.twitchroulette.v1.GetStreamGamesRequest;
  return proto.twitchroulette.v1.GetStreamGamesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.twitchroulette.v1.GetStreamGamesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.twitchroulette.v1.GetStreamGamesRequest}
 */
proto.twitchroulette.v1.GetStreamGamesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.twitchroulette.v1.GetStreamGamesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.twitchroulette.v1.GetStreamGamesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.twitchroulette.v1.GetStreamGamesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.GetStreamGamesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPageToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string parent = 1;
 * @return {string}
 */
proto.twitchroulette.v1.GetStreamGamesRequest.prototype.getParent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.twitchroulette.v1.GetStreamGamesRequest} returns this
 */
proto.twitchroulette.v1.GetStreamGamesRequest.prototype.setParent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string page_token = 2;
 * @return {string}
 */
proto.twitchroulette.v1.GetStreamGamesRequest.prototype.getPageToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.twitchroulette.v1.GetStreamGamesRequest} returns this
 */
proto.twitchroulette.v1.GetStreamGamesRequest.prototype.setPageToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.twitchroulette.v1.GetStreamGamesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.twitchroulette.v1.GetStreamGamesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.twitchroulette.v1.GetStreamGamesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.twitchroulette.v1.GetStreamGamesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.GetStreamGamesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gamesList: jspb.Message.toObjectList(msg.getGamesList(),
    proto.twitchroulette.v1.StreamGame.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.twitchroulette.v1.GetStreamGamesResponse}
 */
proto.twitchroulette.v1.GetStreamGamesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.twitchroulette.v1.GetStreamGamesResponse;
  return proto.twitchroulette.v1.GetStreamGamesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.twitchroulette.v1.GetStreamGamesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.twitchroulette.v1.GetStreamGamesResponse}
 */
proto.twitchroulette.v1.GetStreamGamesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.twitchroulette.v1.StreamGame;
      reader.readMessage(value,proto.twitchroulette.v1.StreamGame.deserializeBinaryFromReader);
      msg.addGames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.twitchroulette.v1.GetStreamGamesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.twitchroulette.v1.GetStreamGamesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.twitchroulette.v1.GetStreamGamesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.twitchroulette.v1.GetStreamGamesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGamesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.twitchroulette.v1.StreamGame.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StreamGame games = 1;
 * @return {!Array<!proto.twitchroulette.v1.StreamGame>}
 */
proto.twitchroulette.v1.GetStreamGamesResponse.prototype.getGamesList = function() {
  return /** @type{!Array<!proto.twitchroulette.v1.StreamGame>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.twitchroulette.v1.StreamGame, 1));
};


/**
 * @param {!Array<!proto.twitchroulette.v1.StreamGame>} value
 * @return {!proto.twitchroulette.v1.GetStreamGamesResponse} returns this
*/
proto.twitchroulette.v1.GetStreamGamesResponse.prototype.setGamesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.twitchroulette.v1.StreamGame=} opt_value
 * @param {number=} opt_index
 * @return {!proto.twitchroulette.v1.StreamGame}
 */
proto.twitchroulette.v1.GetStreamGamesResponse.prototype.addGames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.twitchroulette.v1.StreamGame, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.twitchroulette.v1.GetStreamGamesResponse} returns this
 */
proto.twitchroulette.v1.GetStreamGamesResponse.prototype.clearGamesList = function() {
  return this.setGamesList([]);
};


goog.object.extend(exports, proto.twitchroulette.v1);
